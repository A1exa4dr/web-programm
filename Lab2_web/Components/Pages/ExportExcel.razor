@page "/exportexcel"
@attribute [Authorize(Roles = "Admin")]

@rendermode InteractiveServer
@using ClosedXML.Excel
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<Lab2_web.Data.ApplicationDbContext> DbFactory
@implements IAsyncDisposable

@inject IJSRuntime js

<button type="button" class="btn btn-success mb-2" @onclick="@ExportXLS">Экспорт всех таблиц в Excel</button>

@code {
    Lab2_web.Data.ApplicationDbContext context = default!;

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
    }

    public async Task ExportXLS()
    {
        try
        {
            var XLSStream = ExportXLSData();
            await js.InvokeVoidAsync("BlazorDownloadFile", "данные.xlsx", XLSStream);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private byte[] ExportXLSData()
    {
        using var workbook = new XLWorkbook();

        // Лист для таблицы Сотрудники
        var worksheet1 = workbook.Worksheets.Add("Sotrudnik");
        worksheet1.Cell(1, 1).Value = "Код сотрудника";
        worksheet1.Cell(1, 2).Value = "Фамилия";
        worksheet1.Cell(1, 3).Value = "Имя";
        worksheet1.Cell(1, 4).Value = "Отчество";
        worksheet1.Cell(1, 5).Value = "Дата приема на работу";
        worksheet1.Cell(1, 6).Value = "Дата рождения";
        worksheet1.Cell(1, 7).Value = "Пол";

        worksheet1.Row(1).Style.Font.Bold = true;

        int i = 2;

        foreach (var sotrudnik in context.Sotrudniki)
        {
            worksheet1.Cell(i, 1).Value = sotrudnik.KodSotrudnika;
            worksheet1.Cell(i, 2).Value = sotrudnik.Familiya;
            worksheet1.Cell(i, 3).Value = sotrudnik.Imya;
            worksheet1.Cell(i, 4).Value = sotrudnik.Otchestvo;
            worksheet1.Cell(i, 5).Value = sotrudnik.DataPriemaNaRabotu;
            worksheet1.Cell(i, 6).Value = sotrudnik.DataRozhdeniya;
            worksheet1.Cell(i, 7).Value = sotrudnik.Pol;
            i++;
        }

        // Лист для таблицы Должности
        var worksheet2 = workbook.Worksheets.Add("Dolzhnost");
        worksheet2.Cell(1, 1).Value = "Код должности";
        worksheet2.Cell(1, 2).Value = "Название должности";
        worksheet2.Cell(1, 3).Value = "Льготы";
        worksheet2.Cell(1, 4).Value = "Требования к квалификации";

        worksheet2.Row(1).Style.Font.Bold = true;

        i = 2;

        foreach (var dolzhnost in context.Dolzhnosti)
        {
            worksheet2.Cell(i, 1).Value = dolzhnost.KodDolzhnosti;
            worksheet2.Cell(i, 2).Value = dolzhnost.NazvanieDolzhnosti;
            worksheet2.Cell(i, 3).Value = dolzhnost.Lgoty;
            worksheet2.Cell(i, 4).Value = dolzhnost.TrebovaniyaKvalifikatsii;
            i++;
        }

        // Лист для таблицы Назначения
        var worksheet3 = workbook.Worksheets.Add("Naznachenia");
        worksheet3.Cell(1, 1).Value = "Код документа";
        worksheet3.Cell(1, 2).Value = "Номер документа";
        worksheet3.Cell(1, 3).Value = "Дата регистрации";
        worksheet3.Cell(1, 4).Value = "Дата назначения";
        worksheet3.Cell(1, 5).Value = "Код сотрудника";
        worksheet3.Cell(1, 6).Value = "Код должности";

        worksheet3.Row(1).Style.Font.Bold = true;

        i = 2;

        foreach (var naznachenie in context.Naznacheniyas.Include(n => n.Sotrudnik).Include(n => n.Dolzhnost))
        {
            worksheet3.Cell(i, 1).Value = naznachenie.KodDokumenta;
            worksheet3.Cell(i, 2).Value = naznachenie.NomerDokumenta;
            worksheet3.Cell(i, 3).Value = naznachenie.DataRegistratsii;
            worksheet3.Cell(i, 4).Value = naznachenie.DataNaznachenia;
            worksheet3.Cell(i, 5).Value = naznachenie.KodSotrudnika;
            worksheet3.Cell(i, 6).Value = naznachenie.KodDolzhnosti;
            i++;
        }

        MemoryStream XLSStream = new();
        workbook.SaveAs(XLSStream);

        return XLSStream.ToArray();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
